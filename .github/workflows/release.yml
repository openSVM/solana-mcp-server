name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: solana-mcp-server
            asset_name: solana-mcp-server-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: solana-mcp-server
            asset_name: solana-mcp-server-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: solana-mcp-server
            asset_name: solana-mcp-server-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: solana-mcp-server.exe
            asset_name: solana-mcp-server-windows-amd64.exe

    steps:
      - uses: actions/checkout@v3

      - name: Install OpenSSL (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3 pkg-config
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Install OpenSSL via chocolatey
          choco install openssl -y
          
          # Add OpenSSL to PATH
          $env:Path += ";C:\Program Files\OpenSSL-Win64\bin"
          
          # Verify installation and directories exist
          if (Test-Path "C:\Program Files\OpenSSL-Win64\lib") {
            Write-Host "OpenSSL lib directory found"
          } else {
            Write-Host "OpenSSL lib directory not found, checking alternate locations..."
            if (Test-Path "C:\Program Files\OpenSSL\lib") {
              Write-Host "Found OpenSSL at C:\Program Files\OpenSSL\"
              echo "OPENSSL_DIR=C:\Program Files\OpenSSL" | Out-File -FilePath $env:GITHUB_ENV -Append
              echo "OPENSSL_LIB_DIR=C:\Program Files\OpenSSL\lib" | Out-File -FilePath $env:GITHUB_ENV -Append
              echo "OPENSSL_INCLUDE_DIR=C:\Program Files\OpenSSL\include" | Out-File -FilePath $env:GITHUB_ENV -Append
            } else {
              Write-Host "OpenSSL installation failed or directories not found"
              exit 1
            }
          }
          
          # Set environment variables for the standard location
          if (Test-Path "C:\Program Files\OpenSSL-Win64\lib") {
            echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "OPENSSL_LIB_DIR=C:\Program Files\OpenSSL-Win64\lib" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "OPENSSL_INCLUDE_DIR=C:\Program Files\OpenSSL-Win64\include" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
          
          # Also set OPENSSL_ROOT_DIR for compatibility
          if (Test-Path "C:\Program Files\OpenSSL-Win64") {
            echo "OPENSSL_ROOT_DIR=C:\Program Files\OpenSSL-Win64" | Out-File -FilePath $env:GITHUB_ENV -Append
          } elseif (Test-Path "C:\Program Files\OpenSSL") {
            echo "OPENSSL_ROOT_DIR=C:\Program Files\OpenSSL" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Install Perl dependencies for OpenSSL (Windows fallback)
        if: runner.os == 'Windows'
        run: |
          cpan install Locale::Maketext::Simple
        continue-on-error: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare asset
        shell: bash
        run: |
          mkdir -p release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
            chmod +x release/${{ matrix.asset_name }}
          fi

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: release/${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
