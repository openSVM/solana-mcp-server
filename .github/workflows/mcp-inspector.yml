name: MCP Inspector Compatibility Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  NODE_VERSION: '18'
  # Note: The inspector package name is different in your example. Adjust as needed.
  INSPECTOR_PACKAGE: '@open-svm/mcp-inspector@0.16.2'
  MCP_HOST: '127.0.0.1'
  MCP_PORT: 31902

jobs:
  mcp-inspector-test:
    name: Test MCP Server with Inspector CLI
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build solana-mcp-server
      run: cargo build --release

    - name: Install MCP Inspector CLI and Zod
      run: |
        npm install -g ${{ env.INSPECTOR_PACKAGE }}
        npm install zod

    - name: Create MCP Server Config
      run: |
        mkdir -p test-config
        cat <<EOF > test-config/mcp-config.json
        {
          "network": "devnet",
          "rpc_url": "https://api.devnet.solana.com",
          "mcp_port": ${{ env.MCP_PORT }},
          "mcp_host": "${{ env.MCP_HOST }}",
          "mcp_token": ""
        }
        EOF

    - name: Start Server and Wait for it to be Ready
      run: |
        echo "Starting server in the background..."
        ./target/release/solana-mcp-server --config test-config/mcp-config.json > server.log 2>&1 &
        
        echo "Waiting for server to become available..."
        timeout=120
        for i in $(seq 1 $timeout); do
          if mcp-inspector ping --host ${{ env.MCP_HOST }} --port ${{ env.MCP_PORT }}; then
            echo "✅ Server is up and running!"
            exit 0
          fi
          echo "Still waiting for server... (${i}s)"
          sleep 1
        done
        
        echo "❌ Server did not start within $timeout seconds."
        echo "--- Server Log ---"
        cat server.log
        exit 1

    - name: Run Inspector CLI Tests and Validate Schema
      run: |
        echo "--- Testing 'initialize' method ---"
        mcp-inspector call --host ${{ env.MCP_HOST }} --port ${{ env.MCP_PORT }} --method "initialize" --params '{}' --json > initialize_response.json
        cat initialize_response.json
        
        echo "--- Testing 'tools/list' method ---"
        mcp-inspector call --host ${{ env.MCP_HOST }} --port ${{ env.MCP_PORT }} --method "tools/list" --params '{}' --json > tools_list_response.json
        cat tools_list_response.json

        echo "--- Validating response schemas ---"
        node <<EOF
        const { z } = require('zod');
        const fs = require('fs');
        
        try {
          const initResp = JSON.parse(fs.readFileSync('initialize_response.json', 'utf8'));
          const toolsResp = JSON.parse(fs.readFileSync('tools_list_response.json', 'utf8'));

          // Define schemas based on the MCP spec
          const initializeResultSchema = z.object({
             protocolVersion: z.string(),
             serverInfo: z.object({ name: z.string(), version: z.string() }),
          }).passthrough();

          const toolSchema = z.object({
             name: z.string(),
             description: z.string().optional(),
             inputSchema: z.any()
          });

          const toolsListResultSchema = z.object({
             tools: z.array(toolSchema),
          });

          // Validate 'initialize'
          initializeResultSchema.parse(initResp.result);
          console.log("✅ 'initialize' response schema is valid.");

          // Validate 'tools/list'
          toolsListResultSchema.parse(toolsResp.result);
          console.log("✅ 'tools/list' response schema is valid.");

        } catch (error) {
          console.error("❌ Schema validation failed:", error.message);
          process.exit(1);
        }
        EOF

    - name: Upload Test Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: mcp-test-artifacts
        path: |
          server.log
          initialize_response.json
          tools_list_response.json
        retention-days: 7
