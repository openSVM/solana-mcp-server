name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v3

      - name: Install OpenSSL (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3 pkg-config
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Install OpenSSL via chocolatey
          choco install openssl -y
          
          # Add OpenSSL to PATH
          $env:Path += ";C:\Program Files\OpenSSL-Win64\bin"
          
          # Verify installation and directories exist
          if (Test-Path "C:\Program Files\OpenSSL-Win64\lib") {
            Write-Host "OpenSSL lib directory found"
          } else {
            Write-Host "OpenSSL lib directory not found, checking alternate locations..."
            if (Test-Path "C:\Program Files\OpenSSL\lib") {
              Write-Host "Found OpenSSL at C:\Program Files\OpenSSL\"
              echo "OPENSSL_DIR=C:\Program Files\OpenSSL" | Out-File -FilePath $env:GITHUB_ENV -Append
              echo "OPENSSL_LIB_DIR=C:\Program Files\OpenSSL\lib" | Out-File -FilePath $env:GITHUB_ENV -Append
              echo "OPENSSL_INCLUDE_DIR=C:\Program Files\OpenSSL\include" | Out-File -FilePath $env:GITHUB_ENV -Append
            } else {
              Write-Host "OpenSSL installation failed or directories not found"
              exit 1
            }
          }
          
          # Set environment variables for the standard location
          if (Test-Path "C:\Program Files\OpenSSL-Win64\lib") {
            echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "OPENSSL_LIB_DIR=C:\Program Files\OpenSSL-Win64\lib" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "OPENSSL_INCLUDE_DIR=C:\Program Files\OpenSSL-Win64\include" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
          
          # Also set OPENSSL_ROOT_DIR for compatibility
          if (Test-Path "C:\Program Files\OpenSSL-Win64") {
            echo "OPENSSL_ROOT_DIR=C:\Program Files\OpenSSL-Win64" | Out-File -FilePath $env:GITHUB_ENV -Append
          } elseif (Test-Path "C:\Program Files\OpenSSL") {
            echo "OPENSSL_ROOT_DIR=C:\Program Files\OpenSSL" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Install Perl dependencies for OpenSSL (Windows fallback)
        if: runner.os == 'Windows'
        run: |
          cpan install Locale::Maketext::Simple
        continue-on-error: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        timeout-minutes: 15
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Check for dependency drift
        timeout-minutes: 5
        run: |
          cargo update --dry-run

      - name: Run tests
        timeout-minutes: 20
        run: |
          # Run unit tests for all platforms
          cargo test --lib --target ${{ matrix.target }}
          
          # Run integration tests only on native platforms  
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ]] || \
             [[ "${{ matrix.os }}" == "macos-latest" && "${{ matrix.target }}" == "x86_64-apple-darwin" ]] || \
             [[ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.target }}" == "x86_64-pc-windows-msvc" ]]; then
            echo "Running integration tests on native platform..."
            cargo test --test '*' --target ${{ matrix.target }} || echo "Integration tests may fail due to network restrictions"
          else
            echo "Skipping integration tests for cross-compilation target ${{ matrix.target }}"
          fi
        shell: bash

